[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "landscape-architecture-tool"
dynamic = ["version"]
description = "Professional landscape architecture project management tool"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Landscape Architecture Tool Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.black]
line-length = 120
target-version = ["py312"]
extend-exclude = '''
/(
    archive
    | \.git
    | \.venv
    | venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
skip_glob = ["archive/*", "*/archive/*", ".venv/*", "venv/*"]

[tool.ruff]
line-length = 120
src = ["."]
target-version = "py312"
exclude = [
  ".git",
  ".venv",
  "venv",
  "build",
  "dist",
  "__pycache__",
  "migrations",
  "node_modules",
  "frontend/dist",
  "frontend/node_modules",
  "archive",
  "archive/**/*",
]

[tool.ruff.lint]
# Enable essential linting rules for high quality code with practical CI compatibility
select = [
  "E",     # pycodestyle errors
  "F",     # pyflakes
  "I",     # isort
  "B",     # flake8-bugbear
  "C4",    # flake8-comprehensions  
  "UP",    # pyupgrade
  "S",     # bandit (security) - selective
  "BLE",   # flake8-blind-except
  "C90",   # mccabe complexity
  "G",     # flake8-logging-format
  "PIE",   # flake8-pie
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "SIM",   # flake8-simplify
  "ARG",   # flake8-unused-arguments
  "ERA",   # eradicate
  "PGH",   # pygrep-hooks
  "RUF",   # ruff-specific rules
]

ignore = [
  # Essential ignores for practical CI compliance
  "S101",   # assert used - acceptable in tests
  "S102",   # exec detected - acceptable in dynamic test scenarios
  "S104",   # possible binding to all interfaces - acceptable for development/testing
  "S108",   # insecure temp file - acceptable for test synchronization
  "S311",   # pseudo-random generators - acceptable for testing  
  "S314",   # XML parsing - acceptable for coverage reports
  "S602",   # subprocess with shell=True - acceptable in development scripts
  "S603",   # subprocess call - acceptable for process testing
  "S607",   # partial executable path - acceptable for cross-platform compatibility
  "BLE001", # blind except - acceptable in specific test scenarios
  "F401",   # unused import - acceptable in __init__.py files and optional imports
  "G003",   # logging with + - acceptable for report formatting
  "G004",   # f-string in logging - acceptable for formatted logs
  "G201",   # logging.error with exc_info - acceptable alternative to exception()
  "T201",   # print statements - acceptable in scripts and quality gates
  "UP035",  # typing.Dict/List - acceptable for compatibility
  "PTH100", # os.path.abspath - acceptable for compatibility
  "PTH110", # os.path.exists - acceptable for compatibility  
  "PTH120", # os.path.dirname - acceptable for compatibility
  "PTH123", # open() usage - acceptable for simple file operations
  "PT011",  # pytest.raises(Exception) - acceptable in comprehensive error testing
  "PLC0415", # import not at top - acceptable in test functions and dynamic imports
  "RUF012", # mutable class attributes - acceptable for configuration constants
  "TRY002", # custom exceptions - acceptable for simple error handling
  "TRY300", # else blocks - style preference
  "SIM102", # nested if statements - acceptable for complex validation logic
  "SIM117", # nested with statements - acceptable for clarity
  "SIM105", # use contextlib.suppress - acceptable in test cleanup
  "COM812", # trailing comma - handled by formatter
  "ISC001", # implicit string concatenation - handled by formatter
  "E501",   # line too long - handled by formatter
  "PLR0913", # too many arguments - acceptable for factory methods
  "PLR2004", # magic value - acceptable for test constants
  "PT009",  # use regular assert - acceptable in custom assertions
  "PT027",  # use pytest.raises - acceptable for custom error handling
  "TRY003", # raise long message - acceptable for detailed error messages
  "EM101",  # raw string in exception - acceptable for error formatting
  "EM102",  # f-string in exception - acceptable for dynamic messages
  "FBT001", # boolean trap - acceptable for simple flags
  "FBT002", # boolean default - acceptable for simple flags
  "A003",   # builtin shadow - acceptable for model field names
  "ARG001", # unused function argument - acceptable in test fixtures
  "ARG002", # unused method argument - acceptable in test stubs
  "S110",   # try-except-pass - acceptable in cleanup code
  "PIE790", # unnecessary pass - acceptable in interface methods
  "ERA001", # commented-out code - acceptable in test explanations
  "C901",   # function too complex - acceptable for comprehensive test parsing
  "RUF001", # ambiguous unicode - acceptable for emoji usage in output
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F401", "F811"]
"tests/fixtures/**/*.py" = ["F401", "F811"]
"scripts/**/*.py" = ["S105", "S112", "PT028"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--maxfail=10",
    "--durations=10",
    "--timeout=30",
    "--timeout-method=thread",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-branch"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "service: marks tests as service layer tests",
    "database: marks tests as database tests",
    "flaky: marks tests as potentially flaky (may need retries)",
    "stability: marks tests that check system stability",
    "performance: marks tests that check performance metrics",
    "retry: marks tests that should be retried on failure",
    "isolation: marks tests that verify database isolation",
    "transaction: marks tests that verify transaction handling"
]
timeout = 30
timeout_method = "thread"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore:.*SQLAlchemy.*:DeprecationWarning",
    "ignore:.*datetime.*:DeprecationWarning"
]
# Enhanced test discovery and execution
minversion = "7.0"
required_plugins = [
    "pytest-cov>=4.0",
    "pytest-timeout>=2.0",
    "pytest-mock>=3.0"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.safety]
ignore = [
    # Known issues that are acceptable for development
    # 70612: Jinja2 vulnerability. Acceptable because we are using a pinned version (>=3.1.2) that is not affected.
    #         No user-supplied templates are rendered in this project, further reducing risk.
    #         Review this ignore entry when Jinja2 releases a new major or minor version, or at least quarterly.
    "70612",
]

[tool.pip-tools]
# Enhanced pip-compile configuration for network reliability
index-url = "https://pypi.org/simple"
resolver = "backtracking"
# Use backtracking resolver for better dependency resolution
generate-hashes = false
# Disable hash generation for faster compilation
emit-index-url = true
emit-options = true

[tool.pyright]
# Pyright/Pylance configuration
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = false
reportUnusedVariable = false
reportUnusedClass = false
reportUnusedFunction = false
# Exclude patterns
exclude = [
    "**/__pycache__",
    "**/node_modules",
    ".venv",
    "venv",
    "migrations",
    "frontend/dist",
    "frontend/node_modules",
]
# Include patterns
include = ["src", "tests"]