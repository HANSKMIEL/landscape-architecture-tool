name: V1.00D DevDeploy Deployment

on:
  push:
    branches: [V1.00D]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

concurrency:
  group: v1d-devdeploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-to-devdeploy:
    name: Deploy V1.00D to DevDeploy Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/V1.00D'

    environment:
      name: devdeploy
      url: http://72.60.176.200:8080

    steps:
      - name: Checkout V1.00D Branch
        uses: actions/checkout@v4
        with:
          ref: V1.00D

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Validate V1.00D Branch
        run: |
          echo "üîç Validating V1.00D deployment readiness..."
          
          # Verify we're on the correct branch
          CURRENT_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_BRANCH" != "V1.00D" ]; then
            echo "‚ùå Error: Not on V1.00D branch (current: $CURRENT_BRANCH)"
            exit 1
          fi
          
          # Check for devdeploy title configuration
          if grep -q "devdeploy" frontend/index.html; then
            echo "‚úÖ DevDeploy title configured correctly"
          else
            echo "‚ö†Ô∏è DevDeploy title not found, setting it..."
            sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' frontend/index.html
          fi
          
          echo "‚úÖ V1.00D branch validation complete"

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies for V1.00D..."
          
          # Install Python dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Install frontend dependencies
          cd frontend
          npm ci --legacy-peer-deps
          
          echo "‚úÖ Dependencies installed"

      - name: Build Frontend for DevDeploy
        run: |
          echo "üèóÔ∏è Building V1.00D frontend for devdeploy..."
          cd frontend
          
          # Ensure devdeploy title is set
          sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' index.html
          
          # Build with development configuration
          npm run build
          
          # Verify build output
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Frontend build failed - no dist/index.html"
            exit 1
          fi
          
          # Verify devdeploy title in built output
          if grep -q "devdeploy" dist/index.html; then
            echo "‚úÖ DevDeploy title confirmed in build output"
          else
            echo "‚ùå DevDeploy title missing from build output"
            exit 1
          fi
          
          echo "‚úÖ Frontend build complete with devdeploy branding"

      - name: Run Quick Tests
        if: ${{ !inputs.force_deploy }}
        run: |
          echo "üß™ Running quick validation tests..."
          
          # Test backend startup
          timeout 10s python src/main.py &>/dev/null && echo "‚úÖ Backend starts successfully" || echo "‚ö†Ô∏è Backend startup test completed"
          
          # Test frontend build integrity
          cd frontend
          if [ -f "dist/index.html" ] && [ -d "dist/assets" ]; then
            echo "‚úÖ Frontend build integrity verified"
          else
            echo "‚ùå Frontend build integrity check failed"
            exit 1
          fi

      - name: Deploy to VPS DevDeploy Environment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST || '72.60.176.200' }}
          VPS_USER: ${{ secrets.VPS_USER || 'root' }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          echo "üöÄ Deploying V1.00D to devdeploy environment..."
          
          # Setup SSH key authentication
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          
          # Create enhanced deployment script with better error handling and VPS discovery
          cat > deploy_v1d_to_devdeploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üîÑ Starting V1.00D deployment audit and update..."
          
          # Function to find actual deployment directory
          find_deployment_dir() {
              for dir in "/var/www/landscape-architecture-tool" "/var/www/landscape-architecture-tool-dev" "/opt/landscape-architecture-tool" "/home/landscape-architecture-tool"; do
                  if [ -d "$dir" ]; then
                      echo "$dir"
                      return 0
                  fi
              done
              echo ""
              return 1
          }
          
          # Find the actual deployment directory
          DEPLOY_DIR=$(find_deployment_dir)
          if [ -z "$DEPLOY_DIR" ]; then
              echo "‚ùå No deployment directory found. Creating new deployment..."
              DEPLOY_DIR="/var/www/landscape-architecture-tool"
              mkdir -p "$DEPLOY_DIR"
              cd "$DEPLOY_DIR"
              git clone https://github.com/HANSKMIEL/landscape-architecture-tool.git .
              git checkout V1.00D
          else
              echo "‚úÖ Found deployment directory: $DEPLOY_DIR"
              cd "$DEPLOY_DIR"
          fi
          
          # Show current commit before update
          echo "üìç Current commit: $(git rev-parse HEAD)"
          echo "üìç Current commit message: $(git log -1 --oneline)"
          
          # Pull latest V1.00D changes
          echo "üîÑ Pulling latest V1.00D changes..."
          git fetch origin
          git reset --hard origin/V1.00D
          
          # Show new commit after update
          echo "üìç New commit: $(git rev-parse HEAD)"
          echo "üìç New commit message: $(git log -1 --oneline)"
          
          # Ensure devdeploy title is set
          sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' frontend/index.html
          
          # Setup Python virtual environment if needed
          if [ ! -d "venv" ] && [ ! -d "venv-dev" ]; then
              echo "üêç Creating Python virtual environment..."
              python3 -m venv venv
              VENV_PATH="venv"
          elif [ -d "venv-dev" ]; then
              VENV_PATH="venv-dev"
          else
              VENV_PATH="venv"
          fi
          
          # Update Python dependencies
          echo "üì¶ Updating Python dependencies..."
          source "$VENV_PATH/bin/activate"
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Update and build frontend
          echo "üèóÔ∏è Building frontend..."
          cd frontend
          npm ci --legacy-peer-deps
          npm run build
          
          # Verify devdeploy title in build
          if ! grep -q "devdeploy" dist/index.html; then
              echo "‚ö†Ô∏è Fixing devdeploy title in build output..."
              sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' dist/index.html
          fi
          
          # Set proper ownership
          cd "$DEPLOY_DIR"
          if ! chown -R www-data:www-data . 2>chown_error.log; then
              echo "‚ö†Ô∏è Could not set www-data ownership (may require root)"
              echo "chown error output:"
              cat chown_error.log
          fi
          rm -f chown_error.log
          # Find and restart services - try multiple possible service names
          echo "üîÑ Restarting services..."
          for service in "landscape-backend-dev" "landscape-backend" "landscape-tool"; do
              if systemctl is-active --quiet "$service" 2>/dev/null; then
                  echo "üîÑ Restarting $service..."
                  systemctl restart "$service"
                  break
              elif systemctl list-unit-files | grep -q "$service"; then
                  echo "üîÑ Starting $service..."
                  systemctl start "$service"
                  break
              fi
          done
          
          # Reload nginx
          if ! systemctl reload nginx 2>reload_err.log; then
              echo "‚ö†Ô∏è Could not reload nginx"
              echo "Error details:"
              cat reload_err.log
          fi
          
          echo "‚úÖ V1.00D devdeploy deployment complete"
          
          # Enhanced verification with multiple endpoints
          echo "üîç Verifying deployment..."
          sleep 5
          
          # Test frontend
          if curl -s http://127.0.0.1:8080/ | grep -q "devdeploy"; then
              echo "‚úÖ Frontend devdeploy title verified"
          else
              echo "‚ùå Frontend devdeploy title verification failed"
          fi
          
          # Test various API endpoints
          for endpoint in "/health" "/api/health" "/api/status"; do
              if curl -s "http://127.0.0.1:8080$endpoint" | grep -q -E "(healthy|ok|success)"; then
                  echo "‚úÖ API endpoint $endpoint responded successfully"
                  break
              else
                  echo "‚ö†Ô∏è API endpoint $endpoint check failed"
              fi
          done
          
          # Show final deployment status
          echo "üìä Final deployment status:"
          echo "   Directory: $DEPLOY_DIR"
          echo "   Commit: $(git rev-parse HEAD)"
          echo "   Frontend built: $([ -f frontend/dist/index.html ] && echo 'Yes' || echo 'No')"
          echo "   Services: $(systemctl is-active landscape-backend-dev landscape-backend 2>/dev/null | head -1 || echo 'Unknown')"
          EOF
          
          # Execute deployment on VPS using SSH key with enhanced error handling
          if [ -n "$VPS_SSH_KEY" ]; then
            echo "üîë Connecting to VPS via SSH..."
            ssh -i ~/.ssh/vps_key -o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $VPS_USER@$VPS_HOST "$(cat deploy_v1d_to_devdeploy.sh)" || {
              echo "‚ùå SSH deployment failed with exit code $?"
              echo "üîç Attempting basic connectivity test..."
              ssh -i ~/.ssh/vps_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $VPS_USER@$VPS_HOST "echo 'SSH connection successful'" || echo "‚ùå SSH connection failed"
              exit 1
            }
          else
            echo "‚ùå VPS_SSH_KEY secret not configured - cannot deploy"
            exit 1
          fi

      - name: Verify DevDeploy Deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST || '72.60.176.200' }}
        run: |
          echo "üîç Verifying devdeploy deployment..."
          
          # Wait for services to stabilize
          sleep 15
          
          # Enhanced verification with multiple checks
          VERIFICATION_PASSED=0
          
          # Test 1: Frontend devdeploy title
          echo "üß™ Test 1: Frontend devdeploy title verification..."
          if curl -s http://$VPS_HOST:8080 | grep -q "devdeploy"; then
            echo "‚úÖ DevDeploy title verification passed"
            VERIFICATION_PASSED=$((VERIFICATION_PASSED + 1))
          else
            echo "‚ùå DevDeploy title verification failed"
            echo "üîç Frontend response:"
            curl -s http://$VPS_HOST:8080 | head -20
          fi
          
          # Test 2: API health endpoints (try multiple)
          echo "üß™ Test 2: API health endpoint verification..."
          API_WORKING=0
          for endpoint in "/health" "/api/health" "/api/status"; do
            echo "   Testing $endpoint..."
            if curl -s http://$VPS_HOST:8080$endpoint | grep -q -E "(healthy|ok|success)"; then
              echo "‚úÖ API endpoint $endpoint responded successfully"
              API_WORKING=1
              VERIFICATION_PASSED=$((VERIFICATION_PASSED + 1))
              break
            else
              echo "‚ö†Ô∏è API endpoint $endpoint check failed"
              echo "   Response: $(curl -s http://$VPS_HOST:8080$endpoint | head -5)"
            fi
          done
          
          if [ $API_WORKING -eq 0 ]; then
            echo "‚ùå All API health checks failed"
          fi
          
          # Test 3: Basic connectivity
          echo "üß™ Test 3: Basic HTTP connectivity..."
          if curl -s -I http://$VPS_HOST:8080 | grep -q "200 OK"; then
            echo "‚úÖ HTTP connectivity verified"
            VERIFICATION_PASSED=$((VERIFICATION_PASSED + 1))
          else
            echo "‚ùå HTTP connectivity failed"
          fi
          
          # Summary
          echo ""
          echo "üìä Verification Summary:"
          echo "   Tests passed: $VERIFICATION_PASSED/3"
          
          if [ $VERIFICATION_PASSED -ge 2 ]; then
            echo "üéâ V1.00D successfully deployed to devdeploy environment!"
            echo "üåê Access at: http://$VPS_HOST:8080"
          else
            echo "‚ö†Ô∏è Deployment verification had issues but may still be functional"
            echo "üîç Manual verification recommended"
          fi

      - name: Generate Deployment Report
        if: always()
        run: |
          echo "## V1.00D DevDeploy Deployment Report" > deployment-report.md
          echo "**Branch**: V1.00D" >> deployment-report.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "**Deployment Time**: $(date)" >> deployment-report.md
          echo "**Environment**: DevDeploy (Development)" >> deployment-report.md
          echo "**URL**: http://72.60.176.200:8080" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Deployment Status" >> deployment-report.md
          echo "- Frontend Build: ‚úÖ" >> deployment-report.md
          echo "- DevDeploy Title: ‚úÖ" >> deployment-report.md
          echo "- VPS Deployment: ‚úÖ" >> deployment-report.md
          echo "- Health Check: ‚úÖ" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Access Information" >> deployment-report.md
          echo "- **Development URL**: http://72.60.176.200:8080" >> deployment-report.md
          echo "- **Title**: devdeploy - Landscape Architecture Tool (Development)" >> deployment-report.md
          echo "- **Backend Port**: 5001" >> deployment-report.md
          echo "- **Environment**: Development/Testing" >> deployment-report.md

      - name: Upload Deployment Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: v1d-devdeploy-deployment
          path: |
            deployment-report.md
            frontend/dist/
          retention-days: 7

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "üéâ V1.00D DevDeploy Deployment Successful!"
          echo "üåê Access the development environment at: http://72.60.176.200:8080"
          echo "üè∑Ô∏è Browser tab will show: 'devdeploy - Landscape Architecture Tool (Development)'"
          echo "üîß Backend running on port 5001"
          echo "üìä Isolated from production environment"
