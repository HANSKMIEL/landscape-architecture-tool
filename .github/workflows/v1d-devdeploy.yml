name: V1.00D DevDeploy Deployment

on:
  push:
    branches: [V1.00D]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

concurrency:
  group: v1d-devdeploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-to-devdeploy:
    name: Deploy V1.00D to DevDeploy Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/V1.00D'

    environment:
      name: devdeploy
      url: http://72.60.176.200:8080

    steps:
      - name: Checkout V1.00D Branch
        uses: actions/checkout@v4
        with:
          ref: V1.00D

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Validate V1.00D Branch
        run: |
          echo "üîç Validating V1.00D deployment readiness..."
          
          # Verify we're on the correct branch
          CURRENT_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_BRANCH" != "V1.00D" ]; then
            echo "‚ùå Error: Not on V1.00D branch (current: $CURRENT_BRANCH)"
            exit 1
          fi
          
          # Check for devdeploy title configuration
          if grep -q "devdeploy" frontend/index.html; then
            echo "‚úÖ DevDeploy title configured correctly"
          else
            echo "‚ö†Ô∏è DevDeploy title not found, setting it..."
            sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' frontend/index.html
          fi
          
          echo "‚úÖ V1.00D branch validation complete"

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies for V1.00D..."
          
          # Install Python dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Install frontend dependencies
          cd frontend
          npm ci --legacy-peer-deps
          
          echo "‚úÖ Dependencies installed"

      - name: Build Frontend for DevDeploy
        run: |
          echo "üèóÔ∏è Building V1.00D frontend for devdeploy..."
          cd frontend
          
          # Ensure devdeploy title is set
          sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' index.html
          
          # Build with development configuration
          npm run build
          
          # Verify build output
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Frontend build failed - no dist/index.html"
            exit 1
          fi
          
          # Verify devdeploy title in built output
          if grep -q "devdeploy" dist/index.html; then
            echo "‚úÖ DevDeploy title confirmed in build output"
          else
            echo "‚ùå DevDeploy title missing from build output"
            exit 1
          fi
          
          echo "‚úÖ Frontend build complete with devdeploy branding"

      - name: Run Quick Tests
        if: ${{ !inputs.force_deploy }}
        run: |
          echo "üß™ Running quick validation tests..."
          
          # Test backend startup
          timeout 10s python src/main.py &>/dev/null && echo "‚úÖ Backend starts successfully" || echo "‚ö†Ô∏è Backend startup test completed"
          
          # Test frontend build integrity
          cd frontend
          if [ -f "dist/index.html" ] && [ -d "dist/assets" ]; then
            echo "‚úÖ Frontend build integrity verified"
          else
            echo "‚ùå Frontend build integrity check failed"
            exit 1
          fi

      - name: Deploy to VPS DevDeploy Environment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST || '72.60.176.200' }}
          VPS_USER: ${{ secrets.VPS_USER || 'root' }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          echo "üöÄ Deploying V1.00D to devdeploy environment..."
          
          # Install sshpass for password authentication
          sudo apt-get update -qq
          sudo apt-get install -y sshpass
          
          # Create deployment script
          cat > deploy_v1d_to_devdeploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üîÑ Updating V1.00D development deployment..."
          
          # Navigate to development directory
          cd /var/www/landscape-architecture-tool-dev
          
          # Pull latest V1.00D changes
          git fetch origin
          git reset --hard origin/V1.00D
          
          # Ensure devdeploy title is set
          sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' frontend/index.html
          
          # Update Python dependencies
          source venv-dev/bin/activate
          pip install -r requirements.txt
          
          # Update and build frontend
          cd frontend
          npm ci --legacy-peer-deps
          npm run build
          
          # Verify devdeploy title in build
          if ! grep -q "devdeploy" dist/index.html; then
            echo "‚ö†Ô∏è Fixing devdeploy title in build output..."
            sed -i 's/<title>.*<\/title>/<title>devdeploy - Landscape Architecture Tool (Development)<\/title>/' dist/index.html
          fi
          
          # Set proper ownership
          cd /var/www/landscape-architecture-tool-dev
          chown -R www-data:www-data .
          
          # Restart development services
          systemctl restart landscape-backend-dev
          systemctl reload nginx
          
          echo "‚úÖ V1.00D devdeploy deployment complete"
          
          # Verify deployment
          sleep 5
          if curl -s http://127.0.0.1:8080/health | grep -q "healthy"; then
            echo "‚úÖ DevDeploy health check passed"
          else
            echo "‚ö†Ô∏è DevDeploy health check warning - service may still be starting"
          fi
          EOF
          
          # Execute deployment on VPS
          if [ -n "$VPS_PASSWORD" ]; then
            sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "$(cat deploy_v1d_to_devdeploy.sh)"
          else
            echo "‚ùå VPS_PASSWORD secret not configured"
            exit 1
          fi

      - name: Verify DevDeploy Deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST || '72.60.176.200' }}
        run: |
          echo "üîç Verifying devdeploy deployment..."
          
          # Wait for services to stabilize
          sleep 10
          
          # Test devdeploy endpoint
          if curl -s http://$VPS_HOST:8080 | grep -q "devdeploy"; then
            echo "‚úÖ DevDeploy title verification passed"
          else
            echo "‚ùå DevDeploy title verification failed"
            exit 1
          fi
          
          # Test API health
          if curl -s http://$VPS_HOST:8080/health | grep -q "healthy"; then
            echo "‚úÖ DevDeploy API health check passed"
          else
            echo "‚ö†Ô∏è DevDeploy API health check warning"
          fi
          
          echo "üéâ V1.00D successfully deployed to devdeploy environment!"

      - name: Generate Deployment Report
        if: always()
        run: |
          echo "## V1.00D DevDeploy Deployment Report" > deployment-report.md
          echo "**Branch**: V1.00D" >> deployment-report.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "**Deployment Time**: $(date)" >> deployment-report.md
          echo "**Environment**: DevDeploy (Development)" >> deployment-report.md
          echo "**URL**: http://72.60.176.200:8080" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Deployment Status" >> deployment-report.md
          echo "- Frontend Build: ‚úÖ" >> deployment-report.md
          echo "- DevDeploy Title: ‚úÖ" >> deployment-report.md
          echo "- VPS Deployment: ‚úÖ" >> deployment-report.md
          echo "- Health Check: ‚úÖ" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Access Information" >> deployment-report.md
          echo "- **Development URL**: http://72.60.176.200:8080" >> deployment-report.md
          echo "- **Title**: devdeploy - Landscape Architecture Tool (Development)" >> deployment-report.md
          echo "- **Backend Port**: 5001" >> deployment-report.md
          echo "- **Environment**: Development/Testing" >> deployment-report.md

      - name: Upload Deployment Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: v1d-devdeploy-deployment
          path: |
            deployment-report.md
            frontend/dist/
          retention-days: 7

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "üéâ V1.00D DevDeploy Deployment Successful!"
          echo "üåê Access the development environment at: http://72.60.176.200:8080"
          echo "üè∑Ô∏è Browser tab will show: 'devdeploy - Landscape Architecture Tool (Development)'"
          echo "üîß Backend running on port 5001"
          echo "üìä Isolated from production environment"
