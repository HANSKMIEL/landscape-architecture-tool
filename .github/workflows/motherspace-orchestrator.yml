name: MotherSpace Orchestrator Enhanced

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  pull_request:
    types: [opened, edited, synchronize, labeled, unlabeled]
  workflow_run:
    workflows: ["CI", "Test Failure Issue Automation", "Space Management Automation"]
    types: [completed]
  schedule:
    # MotherSpace harmony check every 2 hours during work hours
    - cron: "0 */2 * * 1-5"
  workflow_dispatch:
    inputs:
      operation:
        description: 'MotherSpace operation to perform'
        required: true
        default: 'harmony_check'
        type: choice
        options:
        - harmony_check
        - task_delegation
        - space_optimization
        - full_analysis
        - safety_test

# Enhanced concurrency control
concurrency:
  group: motherspace-orchestrator
  cancel-in-progress: false

jobs:
  motherspace_orchestrator:
    runs-on: ubuntu-latest
    # Enhanced bot loop prevention with label gating
    if: github.actor != 'github-actions[bot]' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'orchestrate')) || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'orchestrate')))
    permissions:
      issues: write
      pull-requests: write
      contents: read
      actions: read
      repository-projects: write
    env:
      MOTHERSPACE_VERSION: "1.2.0"
      HARMONY_THRESHOLD: "85"
      SECURITY_LEVEL: "high"
      SAFETY_MODE: "enabled"
      QUIET_MODE: "true"
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests jsonschema python-dateutil

      - name: Safety Check and Initialization
        id: safety_check
        run: |
          echo "🛡️ MotherSpace Safety Check..."
          
          # Run safety check
          python .github/scripts/safety_manager.py --check "orchestrator_run" --actor "${{ github.actor }}"
          safety_result=$?
          
          if [ $safety_result -eq 0 ]; then
            echo "✅ Safety check passed"
            echo "safe_to_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Safety check failed - aborting to prevent loops/spam"
            echo "safe_to_proceed=false" >> $GITHUB_OUTPUT
            exit 0  # Exit gracefully, don't fail the workflow
          fi

      - name: MotherSpace Context Analysis
        id: context_analysis
        if: steps.safety_check.outputs.safe_to_proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🎯 MotherSpace Enhanced Orchestrator v${{ env.MOTHERSPACE_VERSION }}');
            console.log('Safety Mode: ${{ env.SAFETY_MODE }}, Quiet Mode: ${{ env.QUIET_MODE }}');
            
            // Enhanced system analysis
            const context_data = {
              trigger: context.eventName,
              actor: context.actor,
              repository: context.repo,
              timestamp: new Date().toISOString(),
              harmony_threshold: parseInt('${{ env.HARMONY_THRESHOLD }}'),
              safety_enabled: '${{ env.SAFETY_MODE }}' === 'enabled',
              quiet_mode: '${{ env.QUIET_MODE }}' === 'true'
            };
            
            // Get repository statistics
            const [repoStats, openIssues, openPRs] = await Promise.all([
              github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              }),
              github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              }),
              github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              })
            ]);
            
            const system_state = {
              repository_health: {
                open_issues: openIssues.data.length,
                open_prs: openPRs.data.length,
                last_push: repoStats.data.pushed_at
              },
              automated_issues: openIssues.data.filter(issue => 
                issue.labels.some(label => 
                  ['automated', 'motherspace', 'copilot'].includes(label.name)
                )
              ).length,
              harmony_score: Math.max(0, 100 - (openIssues.data.length * 2) - (openPRs.data.length * 3)),
              needs_intervention: false
            };
            
            system_state.needs_intervention = system_state.harmony_score < context_data.harmony_threshold;
            
            core.setOutput('system_state', JSON.stringify(system_state));
            core.setOutput('context_data', JSON.stringify(context_data));
            
            console.log(`📊 System Analysis Complete:`);
            console.log(`   Harmony Score: ${system_state.harmony_score}%`);
            console.log(`   Open Issues: ${system_state.repository_health.open_issues}`);
            console.log(`   Automated Issues: ${system_state.automated_issues}`);
            console.log(`   Intervention Needed: ${system_state.needs_intervention}`);
            
            return system_state;

      - name: Enhanced Issue Management with Deduplication
        id: issue_management
        if: steps.safety_check.outputs.safe_to_proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            
            console.log('🔍 Enhanced Issue Management with Safety Features...');
            
            // Get all automated issues
            const automatedIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated',
              per_page: 100
            });
            
            const results = {
              issues_analyzed: automatedIssues.data.length,
              fingerprints_generated: {},
              duplicates_found: [],
              tracking_issues_updated: [],
              operations_performed: 0,
              errors: []
            };
            
            // Generate fingerprints using the safety manager approach
            function generateFingerprint(issue) {
              const title = (issue.title || '').toLowerCase().trim();
              const body = (issue.body || '').toLowerCase().trim();
              const labels = (issue.labels || []).map(l => l.name).sort();
              
              // Simple normalization
              const normalizedTitle = title
                .replace(/\d{4}-\d{2}-\d{2}[T\s]\d{2}:\d{2}:\d{2}/g, '[TIMESTAMP]')
                .replace(/#\d+/g, '[ISSUE_REF]');
              
              const normalizedBody = body
                .replace(/\d{4}-\d{2}-\d{2}[T\s]\d{2}:\d{2}:\d{2}/g, '[TIMESTAMP]')
                .replace(/#\d+/g, '[ISSUE_REF]');
              
              const fingerprintData = {
                title: normalizedTitle,
                body_hash: crypto.createHash('sha256').update(normalizedBody).digest('hex').substring(0, 16),
                labels: labels
              };
              
              const fingerprintString = JSON.stringify(fingerprintData);
              return crypto.createHash('sha256').update(`motherspace-v1.2.0:${fingerprintString}`).digest('hex').substring(0, 16);
            }
            
            // Group issues by fingerprint
            const fingerprintGroups = {};
            for (const issue of automatedIssues.data) {
              const fingerprint = generateFingerprint(issue);
              results.fingerprints_generated[issue.number] = fingerprint;
              
              if (!fingerprintGroups[fingerprint]) {
                fingerprintGroups[fingerprint] = [];
              }
              fingerprintGroups[fingerprint].push(issue);
            }
            
            // Find duplicates (groups with multiple issues)
            for (const [fingerprint, issues] of Object.entries(fingerprintGroups)) {
              if (issues.length > 1) {
                // Sort by creation date (keep newest)
                issues.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                const newest = issues[0];
                const duplicates = issues.slice(1);
                
                results.duplicates_found.push({
                  fingerprint: fingerprint,
                  newest_issue: newest.number,
                  duplicate_issues: duplicates.map(d => d.number),
                  total_count: issues.length
                });
              }
            }
            
            // Check for PR interference (safety feature)
            const openPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Safely manage duplicates (limit to prevent spam)
            const maxOperations = 3; // Safety limit
            const safeGroups = results.duplicates_found.slice(0, maxOperations);
            
            for (const group of safeGroups) {
              try {
                // Check if any PRs reference these issues
                const referencedInPRs = openPRs.data.some(pr => 
                  group.duplicate_issues.some(issueNum => 
                    (pr.body && pr.body.includes(`#${issueNum}`)) ||
                    pr.title.includes(issueNum.toString())
                  )
                );
                
                if (referencedInPRs) {
                  console.log(`⚠️ Skipping duplicate group - referenced in open PRs`);
                  continue;
                }
                
                // Create or update tracking issue (create-or-update pattern)
                const trackingTitle = `🎯 MotherSpace Tracking - ${group.fingerprint.substring(0, 8)}`;
                const trackingBody = [
                  `# MotherSpace Issue Tracking`,
                  ``,
                  `**Tracking ID:** \`${group.fingerprint}\``,
                  `**Created:** ${new Date().toISOString()}`,
                  `**Primary Issue:** #${group.newest_issue}`,
                  `**Consolidated Issues:** ${group.duplicate_issues.length} duplicates`,
                  ``,
                  `## Purpose`,
                  `This tracking issue consolidates multiple similar automated issues to reduce repository noise while preserving all information.`,
                  ``,
                  `## Quality Assurance`,
                  `- ✅ Safety checks passed`,
                  `- ✅ No PR interference detected`,
                  `- ✅ Fingerprint-based deduplication applied`,
                  `- ✅ Quiet mode: updates existing instead of creating new`,
                  ``,
                  `---`,
                  `*MotherSpace Enhanced Orchestrator v${{ env.MOTHERSPACE_VERSION }}*`
                ].join('\\n');
                
                // Create tracking issue
                const trackingIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: trackingTitle,
                  body: trackingBody,
                  labels: ['motherspace-tracking', 'automated', 'consolidation']
                });
                
                // Close duplicates with reference to tracking issue
                for (const duplicateIssue of group.duplicate_issues) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: duplicateIssue,
                    body: [
                      `## 🎯 MotherSpace Consolidation`,
                      ``,
                      `This issue has been consolidated under tracking issue #${trackingIssue.data.number}.`,
                      ``,
                      `**Reason:** Duplicate detected via enhanced fingerprint analysis`,
                      `**Tracking Issue:** #${trackingIssue.data.number}`,
                      `**Safety Features:** ✅ Applied`,
                      ``,
                      `All information is preserved in the tracking issue.`,
                      ``,
                      `---`,
                      `*MotherSpace Enhanced Orchestrator v${{ env.MOTHERSPACE_VERSION }}*`
                    ].join('\\n')
                  });
                  
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: duplicateIssue,
                    state: 'closed',
                    labels: ['duplicate', 'motherspace-managed', 'consolidated']
                  });
                }
                
                results.tracking_issues_updated.push({
                  tracking_issue: trackingIssue.data.number,
                  duplicates_closed: group.duplicate_issues,
                  fingerprint: group.fingerprint
                });
                
                results.operations_performed++;
                console.log(`🔄 Created tracking issue #${trackingIssue.data.number}, closed ${group.duplicate_issues.length} duplicates`);
                
              } catch (error) {
                results.errors.push(`Failed to manage duplicate group: ${error.message}`);
              }
            }
            
            core.setOutput('management_results', JSON.stringify(results));
            
            console.log(`📊 Enhanced Issue Management Complete:`);
            console.log(`   Issues analyzed: ${results.issues_analyzed}`);
            console.log(`   Duplicates found: ${results.duplicates_found.length}`);
            console.log(`   Operations performed: ${results.operations_performed}`);
            console.log(`   Errors: ${results.errors.length}`);
            
            return results;

      - name: Complete Safety Operation
        if: always() && steps.safety_check.outputs.safe_to_proceed == 'true'
        run: |
          echo "🛡️ Completing safety operation..."
          
          # Update tracking and release locks
          python .github/scripts/safety_manager.py --cleanup
          
          echo "✅ MotherSpace Enhanced Orchestrator completed safely"

      - name: Summary Report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const safetyPassed = '${{ steps.safety_check.outputs.safe_to_proceed }}' === 'true';
            
            if (!safetyPassed) {
              console.log('🚫 MotherSpace operation skipped due to safety constraints');
              console.log('This prevents bot loops, spam, and conflicts');
              return;
            }
            
            const managementResults = JSON.parse('${{ steps.issue_management.outputs.management_results || "{}" }}');
            const systemState = JSON.parse('${{ steps.context_analysis.outputs.system_state || "{}" }}');
            
            console.log('🎯 MotherSpace Enhanced Orchestrator Summary:');
            console.log(`   Version: ${{ env.MOTHERSPACE_VERSION }}`);
            console.log(`   Harmony Score: ${systemState.harmony_score || 'N/A'}%`);
            console.log(`   Operations: ${managementResults.operations_performed || 0}`);
            console.log(`   Safety: ✅ Enabled and Active`);
            console.log(`   Mode: ${{ env.QUIET_MODE === 'true' && 'Quiet' || 'Standard' }}`);
            console.log(`   Next check: ${context.eventName === 'schedule' ? 'In 2 hours' : 'Event-triggered'}`);