name: MotherSpace Orchestrator

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  pull_request:
    types: [opened, edited, synchronize, labeled, unlabeled]
  workflow_run:
    workflows: ["CI", "Test Failure Issue Automation", "Space Management Automation"]
    types: [completed]
  schedule:
    # MotherSpace harmony check every 2 hours during work hours
    - cron: "0 */2 * * 1-5"
  workflow_dispatch:
    inputs:
      operation:
        description: 'MotherSpace operation to perform'
        required: true
        default: 'harmony_check'
        type: choice
        options:
        - harmony_check
        - task_delegation
        - space_optimization
        - full_analysis

jobs:
  motherspace_orchestrator:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      actions: read
      repository-projects: write
    env:
      MOTHERSPACE_VERSION: "1.0.0"
      HARMONY_THRESHOLD: "85"
      SECURITY_LEVEL: "high"
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Deep history for pattern analysis
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install MotherSpace dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests jsonschema python-dateutil
      
      - name: MotherSpace Initialization and Context Analysis
        id: motherspace_init
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            console.log('🎯 MotherSpace Orchestrator v${{ env.MOTHERSPACE_VERSION }} Initializing...');
            
            // Analyze current system state
            const systemState = {
              timestamp: new Date().toISOString(),
              trigger: context.eventName,
              operation: '${{ github.event.inputs.operation }}' || 'auto',
              repository: {
                owner: context.repo.owner,
                repo: context.repo.repo,
                default_branch: context.payload.repository?.default_branch || 'main'
              },
              spaces: {
                motherspace: { active: true, version: '${{ env.MOTHERSPACE_VERSION }}' },
                daughter: { active: false, status: 'initializing' },
                integration_manager: { active: false, status: 'initializing' }
              },
              harmony_threshold: parseInt('${{ env.HARMONY_THRESHOLD }}'),
              security_level: '${{ env.SECURITY_LEVEL }}'
            };
            
            // Scan for existing spaces and their health
            const spaceFiles = [
              '.github/copilot-instructions.md',
              '.github/workflows/space-management.yml',
              '.github/workflows/test-failure-automation.yml',
              'docs/SPACE_OVERVIEW.md',
              'docs/ARCHITECTURE.md'
            ];
            
            for (const spaceFile of spaceFiles) {
              try {
                const content = fs.readFileSync(spaceFile, 'utf8');
                const stats = fs.statSync(spaceFile);
                systemState.spaces[spaceFile] = {
                  exists: true,
                  size: stats.size,
                  lastModified: stats.mtime,
                  health: content.length > 1000 ? 'good' : 'needs_attention'
                };
              } catch (error) {
                systemState.spaces[spaceFile] = { exists: false, health: 'missing' };
              }
            }
            
            // Analyze active issues and PRs for task delegation opportunities
            const [issues, pulls] = await Promise.all([
              github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              }),
              github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 50
              })
            ]);
            
            systemState.active_work = {
              open_issues: issues.data.length,
              open_prs: pulls.data.length,
              issues_by_type: {},
              prs_by_type: {},
              delegation_candidates: []
            };
            
            // Categorize issues for delegation
            for (const issue of issues.data) {
              const labels = issue.labels.map(l => l.name);
              const type = labels.find(l => ['bug', 'enhancement', 'feature', 'maintenance', 'ui-ux', 'integration'].includes(l)) || 'uncategorized';
              
              systemState.active_work.issues_by_type[type] = (systemState.active_work.issues_by_type[type] || 0) + 1;
              
              // Identify delegation candidates
              if (labels.includes('needs-triage') || labels.includes('help wanted') || 
                  issue.title.toLowerCase().includes('ui') || issue.title.toLowerCase().includes('integration')) {
                systemState.active_work.delegation_candidates.push({
                  number: issue.number,
                  title: issue.title,
                  labels: labels,
                  suggested_space: labels.includes('ui-ux') ? 'daughter' : 
                                 labels.includes('integration') ? 'integration_manager' : 'motherspace'
                });
              }
            }
            
            // Calculate system harmony score
            const harmony_factors = {
              space_health: Object.values(systemState.spaces).filter(s => s.health === 'good').length / Object.keys(systemState.spaces).length,
              issue_balance: Math.min(systemState.active_work.open_issues / 20, 1), // Optimal: 20 or fewer open issues
              pr_freshness: Math.min(systemState.active_work.open_prs / 10, 1), // Optimal: 10 or fewer open PRs
              delegation_efficiency: systemState.active_work.delegation_candidates.length / Math.max(systemState.active_work.open_issues, 1)
            };
            
            const harmony_score = Math.round(
              (harmony_factors.space_health * 0.3 + 
               (1 - harmony_factors.issue_balance) * 0.25 +
               (1 - harmony_factors.pr_freshness) * 0.25 +
               harmony_factors.delegation_efficiency * 0.2) * 100
            );
            
            systemState.harmony_score = harmony_score;
            systemState.harmony_factors = harmony_factors;
            systemState.needs_intervention = harmony_score < parseInt('${{ env.HARMONY_THRESHOLD }}');
            
            core.setOutput('system_state', JSON.stringify(systemState));
            core.setOutput('harmony_score', harmony_score);
            core.setOutput('needs_intervention', systemState.needs_intervention);
            
            console.log(`🎯 System Harmony Score: ${harmony_score}%`);
            console.log(`🔄 Delegation Candidates: ${systemState.active_work.delegation_candidates.length}`);
            
            return systemState;

      - name: Space Health Assessment and Optimization
        id: space_assessment
        if: ${{ fromJSON(steps.motherspace_init.outputs.system_state).needs_intervention || github.event.inputs.operation == 'space_optimization' }}
        uses: actions/github-script@v7
        with:
          script: |
            const systemState = JSON.parse('${{ steps.motherspace_init.outputs.system_state }}');
            
            console.log('🔍 Performing deep space health assessment...');
            
            const optimizationPlan = {
              immediate_actions: [],
              daughter_tasks: [],
              integration_manager_tasks: [],
              space_updates: []
            };
            
            // Analyze Copilot Space health
            if (!systemState.spaces['.github/copilot-instructions.md']?.exists) {
              optimizationPlan.immediate_actions.push({
                priority: 'critical',
                action: 'create_copilot_instructions',
                description: 'Create comprehensive Copilot instructions for MotherSpace system'
              });
            }
            
            // Check for UI/UX issues that need Daughter space attention
            for (const candidate of systemState.active_work.delegation_candidates) {
              if (candidate.suggested_space === 'daughter') {
                optimizationPlan.daughter_tasks.push({
                  issue_number: candidate.number,
                  title: candidate.title,
                  analysis_type: 'ui_ux_optimization',
                  priority: candidate.labels.includes('priority-high') ? 'high' : 'medium'
                });
              } else if (candidate.suggested_space === 'integration_manager') {
                optimizationPlan.integration_manager_tasks.push({
                  issue_number: candidate.number,
                  title: candidate.title,
                  integration_type: 'external_system',
                  priority: candidate.labels.includes('priority-high') ? 'high' : 'medium'
                });
              }
            }
            
            // Space documentation updates needed
            if (systemState.harmony_score < 90) {
              optimizationPlan.space_updates.push({
                file: '.github/copilot-instructions.md',
                update_type: 'motherspace_patterns',
                reason: 'Add MotherSpace orchestration patterns'
              });
            }
            
            core.setOutput('optimization_plan', JSON.stringify(optimizationPlan));
            
            console.log(`📋 Optimization Plan Generated:`);
            console.log(`   Immediate Actions: ${optimizationPlan.immediate_actions.length}`);
            console.log(`   Daughter Tasks: ${optimizationPlan.daughter_tasks.length}`);
            console.log(`   Integration Tasks: ${optimizationPlan.integration_manager_tasks.length}`);
            
            return optimizationPlan;

      - name: Task Delegation and Chronological Planning
        id: task_delegation
        if: ${{ steps.space_assessment.outputs.optimization_plan && fromJSON(steps.space_assessment.outputs.optimization_plan).immediate_actions }}
        uses: actions/github-script@v7
        with:
          script: |
            const optimizationPlan = JSON.parse('${{ steps.space_assessment.outputs.optimization_plan }}');
            const systemState = JSON.parse('${{ steps.motherspace_init.outputs.system_state }}');
            
            console.log('🎯 MotherSpace initiating task delegation...');
            
            // Create chronological development order
            const taskSequence = [];
            
            // Phase 1: Critical infrastructure
            optimizationPlan.immediate_actions
              .filter(action => action.priority === 'critical')
              .forEach((action, index) => {
                taskSequence.push({
                  phase: 1,
                  order: index + 1,
                  space: 'motherspace',
                  task: action,
                  dependencies: [],
                  estimated_duration: '2-4 hours'
                });
              });
            
            // Phase 2: Daughter space UI/UX tasks
            optimizationPlan.daughter_tasks.forEach((task, index) => {
              taskSequence.push({
                phase: 2,
                order: index + 1,
                space: 'daughter',
                task: task,
                dependencies: taskSequence.filter(t => t.phase === 1).map(t => `Phase-1-Task-${t.order}`),
                estimated_duration: '4-8 hours'
              });
            });
            
            // Phase 3: Integration manager tasks
            optimizationPlan.integration_manager_tasks.forEach((task, index) => {
              taskSequence.push({
                phase: 3,
                order: index + 1,
                space: 'integration_manager',
                task: task,
                dependencies: [], // Can run in parallel with daughter tasks
                estimated_duration: '6-12 hours'
              });
            });
            
            // Create comprehensive delegation issue
            if (taskSequence.length > 0) {
              const title = `🎯 MotherSpace Task Delegation - ${taskSequence.length} Tasks Queued`;
              const body = [
                `# MotherSpace Orchestrated Task Delegation`,
                ``,
                `**Orchestration Time:** ${new Date().toISOString()}`,
                `**Harmony Score:** ${systemState.harmony_score}% (Target: ≥${systemState.harmony_threshold}%)`,
                `**Security Level:** ${systemState.security_level.toUpperCase()}`,
                `**Total Tasks:** ${taskSequence.length}`,
                ``,
                `## 🎯 MotherSpace Analysis`,
                `The MotherSpace has analyzed the current system state and identified tasks requiring coordinated execution across multiple spaces. Each task has been prioritized and sequenced for optimal development flow with quality and security checks in place.`,
                ``,
                `## 📋 Chronological Task Sequence`,
                ``,
                ...taskSequence.map(task => [
                  `### Phase ${task.phase} - Task ${task.order} (${task.space.toUpperCase()})`,
                  `**Space:** ${task.space}`,
                  `**Duration:** ${task.estimated_duration}`,
                  `**Dependencies:** ${task.dependencies.length > 0 ? task.dependencies.join(', ') : 'None'}`,
                  ``,
                  `**Task Details:**`,
                  task.space === 'daughter' ? [
                    `- **Issue:** #${task.task.issue_number} - ${task.task.title}`,
                    `- **Analysis Type:** ${task.task.analysis_type}`,
                    `- **Priority:** ${task.task.priority}`,
                    `- **Daughter Focus:** UI/UX optimization, user workflow analysis, visual appeal enhancement`
                  ].join('\n') : 
                  task.space === 'integration_manager' ? [
                    `- **Issue:** #${task.task.issue_number} - ${task.task.title}`,
                    `- **Integration Type:** ${task.task.integration_type}`,
                    `- **Priority:** ${task.task.priority}`,
                    `- **Manager Focus:** External system integration, module development, API connections`
                  ].join('\n') : [
                    `- **Action:** ${task.task.action}`,
                    `- **Description:** ${task.task.description}`,
                    `- **Priority:** ${task.task.priority}`,
                    `- **MotherSpace Focus:** System orchestration, space coordination, quality assurance`
                  ].join('\n'),
                  ``,
                  `- [ ] Task ready for execution`,
                  `- [ ] Dependencies verified`,
                  `- [ ] Quality checks passed`,
                  `- [ ] Security validation completed`,
                  `- [ ] Task execution completed`,
                  `- [ ] Results integrated`,
                  ``,
                ]).flat(),
                `## 🔄 Cross-Space Communication Protocol`,
                ``,
                `**Daughter → MotherSpace Reporting:**`,
                `- All UI/UX analysis results reported in comments on this issue`,
                `- Visual appeal recommendations with screenshots/mockups`,
                `- User workflow optimization suggestions`,
                `- Integration error reports labeled "Daughter-Integration Manager [Date Time]"`,
                ``,
                `**IntegrationManager → MotherSpace Reporting:**`,
                `- Module development progress updates`,
                `- External system integration status`,
                `- API connection results and recommendations`,
                `- Cross-profession adaptability analysis`,
                ``,
                `**MotherSpace Coordination:**`,
                `- Monitors all space activities for harmony`,
                `- Resolves conflicts between spaces`,
                `- Ensures chronological task execution`,
                `- Maintains quality and security standards`,
                ``,
                `## 🛡️ Quality and Security Checkpoints`,
                ``,
                `Each task must pass these checkpoints before proceeding:`,
                ``,
                `### Phase 1 Checkpoints (MotherSpace):`,
                `- [ ] Code quality standards maintained`,
                `- [ ] Security vulnerabilities addressed`,
                `- [ ] Documentation updated`,
                `- [ ] Space coordination verified`,
                ``,
                `### Phase 2 Checkpoints (Daughter):`,
                `- [ ] UI/UX improvements validated`,
                `- [ ] User workflow optimizations tested`,
                `- [ ] Visual appeal enhancements verified`,
                `- [ ] Integration requirements documented`,
                ``,
                `### Phase 3 Checkpoints (IntegrationManager):`,
                `- [ ] Module functionality verified`,
                `- [ ] External integrations tested`,
                `- [ ] API connections validated`,
                `- [ ] Cross-profession compatibility confirmed`,
                ``,
                `## 📊 Success Metrics`,
                ``,
                `**Target Outcomes:**`,
                `- Harmony Score: ≥${systemState.harmony_threshold}% (Current: ${systemState.harmony_score}%)`,
                `- Open Issues: ≤20 (Current: ${systemState.active_work.open_issues})`,
                `- Open PRs: ≤10 (Current: ${systemState.active_work.open_prs})`,
                `- Cross-space efficiency: ≥90%`,
                ``,
                `---`,
                `*This issue was created by MotherSpace Orchestrator v${systemState.spaces.motherspace.version}*`,
                `*All spaces must work in harmony while maintaining functionality, security, and efficiency*`,
                ``,
                `**🎯 MotherSpace Signature:** \`HARMONY-${systemState.harmony_score}-${Date.now()}\``
              ].join('\n');
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['motherspace', 'orchestration', 'task-delegation', 'automated', 'priority-high'],
                assignees: ['HANSKMIEL']
              });
              
              console.log(`🎯 Created MotherSpace delegation issue #${issue.data.number}`);
              
              // Create sub-issues for each space-specific task
              for (const task of taskSequence.filter(t => t.space !== 'motherspace')) {
                const subTitle = `${task.space === 'daughter' ? '👩‍💻 Daughter' : '🔗 IntegrationManager'} - Phase ${task.phase} Task ${task.order}`;
                const subBody = [
                  `# ${task.space.charAt(0).toUpperCase() + task.space.slice(1)} Space Task`,
                  ``,
                  `**Parent Issue:** #${issue.data.number}`,
                  `**Phase:** ${task.phase}`,
                  `**Execution Order:** ${task.order}`,
                  `**Space:** ${task.space}`,
                  `**Estimated Duration:** ${task.estimated_duration}`,
                  ``,
                  task.space === 'daughter' ? [
                    `## 👩‍💻 Daughter Space UI/UX Analysis`,
                    ``,
                    `**Target Issue:** #${task.task.issue_number} - ${task.task.title}`,
                    `**Analysis Type:** ${task.task.analysis_type}`,
                    `**Priority Level:** ${task.task.priority}`,
                    ``,
                    `### Required Analysis:`,
                    `- [ ] Visual appeal assessment with screenshots`,
                    `- [ ] User experience workflow analysis`,
                    `- [ ] Data import/export workflow evaluation`,
                    `- [ ] User feedback mechanism review`,
                    `- [ ] Workability enhancement recommendations`,
                    ``,
                    `### Deliverables:`,
                    `- [ ] Comprehensive UI/UX analysis report`,
                    `- [ ] Visual mockups or improvement suggestions`,
                    `- [ ] User workflow optimization plan`,
                    `- [ ] Integration requirements for MotherSpace`,
                    ``,
                    `### Communication Protocol:`,
                    `- Report all findings as comments on parent issue #${issue.data.number}`,
                    `- Include screenshots for visual improvements`,
                    `- Tag MotherSpace for coordination needs`,
                    `- Create "Daughter-Integration Manager [Date Time]" issues for major integration needs`
                  ].join('\n') : [
                    `## 🔗 IntegrationManager Space Module Development`,
                    ``,
                    `**Target Issue:** #${task.task.issue_number} - ${task.task.title}`,
                    `**Integration Type:** ${task.task.integration_type}`,
                    `**Priority Level:** ${task.task.priority}`,
                    ``,
                    `### Required Development:`,
                    `- [ ] Modules repository setup and initialization`,
                    `- [ ] Integration module design and development`,
                    `- [ ] API connection establishment`,
                    `- [ ] Cross-profession adaptability analysis`,
                    `- [ ] External system compatibility testing`,
                    ``,
                    `### Deliverables:`,
                    `- [ ] Functional integration module`,
                    `- [ ] API documentation and examples`,
                    `- [ ] Cross-profession adaptation guidelines`,
                    `- [ ] Integration testing results`,
                    ``,
                    `### Communication Protocol:`,
                    `- Report progress on parent issue #${issue.data.number}`,
                    `- Update MotherSpace on cross-repo changes`,
                    `- Coordinate with Daughter space for UI integrations`,
                    `- Maintain Modules repository synchronization`
                  ].join('\n'),
                  ``,
                  `---`,
                  `*This task is orchestrated by MotherSpace and must maintain harmony with all other spaces*`
                ].join('\n');
                
                const subIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: subTitle,
                  body: subBody,
                  labels: [task.space, 'motherspace-delegated', 'sub-task', task.task.priority || 'medium'],
                  assignees: ['HANSKMIEL']
                });
                
                console.log(`  └─ Created ${task.space} sub-issue #${subIssue.data.number}`);
              }
            }
            
            core.setOutput('delegation_completed', true);
            core.setOutput('tasks_delegated', taskSequence.length);

      - name: Harmony Optimization and Continuous Monitoring
        id: harmony_optimization
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const systemState = JSON.parse('${{ steps.motherspace_init.outputs.system_state }}');
            
            console.log('🔄 MotherSpace continuous harmony monitoring activated...');
            
            // Generate harmony report
            const harmonyReport = {
              timestamp: new Date().toISOString(),
              current_score: systemState.harmony_score,
              target_score: parseInt('${{ env.HARMONY_THRESHOLD }}'),
              status: systemState.harmony_score >= parseInt('${{ env.HARMONY_THRESHOLD }}') ? 'optimal' : 'requires_attention',
              factors: systemState.harmony_factors,
              recommendations: []
            };
            
            // Add optimization recommendations
            if (systemState.harmony_factors.space_health < 0.8) {
              harmonyReport.recommendations.push({
                category: 'space_health',
                priority: 'high',
                action: 'Update and optimize space documentation files',
                impact: 'Improves AI assistance and development efficiency'
              });
            }
            
            if (systemState.active_work.open_issues > 20) {
              harmonyReport.recommendations.push({
                category: 'issue_management',
                priority: 'medium',
                action: 'Triage and close stale issues, delegate active ones',
                impact: 'Reduces cognitive load and improves focus'
              });
            }
            
            if (systemState.active_work.delegation_candidates.length > 5) {
              harmonyReport.recommendations.push({
                category: 'delegation',
                priority: 'medium',
                action: 'Activate Daughter and IntegrationManager spaces for specialized tasks',
                impact: 'Distributes workload and improves specialized handling'
              });
            }
            
            // Save harmony report
            const reportPath = `reports/harmony/motherspace_harmony_${new Date().toISOString().split('T')[0]}.json`;
            require('fs').writeFileSync(reportPath, JSON.stringify(harmonyReport, null, 2));
            
            console.log(`📊 Harmony Report Generated: ${harmonyReport.status.toUpperCase()}`);
            console.log(`   Current Score: ${harmonyReport.current_score}%`);
            console.log(`   Recommendations: ${harmonyReport.recommendations.length}`);
            
            return harmonyReport;

      - name: Create MotherSpace Status Report
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const systemState = JSON.parse('${{ steps.motherspace_init.outputs.system_state }}');
            const delegationCompleted = '${{ steps.task_delegation.outputs.delegation_completed }}' === 'true';
            const tasksDelegated = '${{ steps.task_delegation.outputs.tasks_delegated }}' || '0';
            
            console.log('📋 Creating MotherSpace operational status report...');
            
            // Create status comment on trigger issue/PR if applicable
            let statusMessage = [
              `## 🎯 MotherSpace Orchestrator Status Report`,
              ``,
              `**Operational Time:** ${new Date().toISOString()}`,
              `**Trigger:** ${context.eventName}`,
              `**Version:** v${{ env.MOTHERSPACE_VERSION }}`,
              ``,
              `### System Harmony Analysis`,
              `- **Current Score:** ${systemState.harmony_score}% (Target: ≥${{ env.HARMONY_THRESHOLD }}%)`,
              `- **Status:** ${systemState.needs_intervention ? '⚠️ Requires Intervention' : '✅ Optimal Harmony'}`,
              `- **Active Issues:** ${systemState.active_work.open_issues}`,
              `- **Active PRs:** ${systemState.active_work.open_prs}`,
              `- **Delegation Candidates:** ${systemState.active_work.delegation_candidates.length}`,
              ``,
              `### Space Status`,
              `- **MotherSpace:** 🎯 Active and Orchestrating`,
              `- **Daughter Space:** 👩‍💻 ${systemState.spaces.daughter.status}`,
              `- **IntegrationManager:** 🔗 ${systemState.spaces.integration_manager.status}`,
              ``,
              delegationCompleted ? [
                `### Task Delegation Results`,
                `- **Tasks Delegated:** ${tasksDelegated}`,
                `- **Spaces Activated:** Multiple`,
                `- **Chronological Order:** Established`,
                `- **Quality Checks:** Enabled`,
                `- **Security Level:** ${{ env.SECURITY_LEVEL }}`,
                ``
              ].join('\n') : '',
              `### Next Actions`,
              systemState.needs_intervention ? [
                `- 🔄 Monitor delegated task execution`,
                `- 📊 Track harmony score improvements`,
                `- 🛡️ Ensure quality and security standards`,
                `- 🎯 Coordinate cross-space communication`
              ].join('\n') : [
                `- ✅ System operating optimally`,
                `- 🔄 Continue monitoring for harmony`,
                `- 📈 Maintain current efficiency levels`,
                `- 🎯 Ready for new task coordination`
              ].join('\n'),
              ``,
              `---`,
              `*MotherSpace ensures all spaces work in harmony without compromising functionality, security, or efficiency*`
            ].join('\n');
            
            console.log('🎯 MotherSpace Orchestrator cycle completed successfully');
            console.log(`   Status: ${systemState.needs_intervention ? 'Intervention Mode' : 'Harmony Mode'}`);
            console.log(`   Next check: ${context.eventName === 'schedule' ? 'In 2 hours' : 'Event-triggered'}`);