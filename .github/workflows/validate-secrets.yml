name: Validate Required Secrets

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Weekly on Sunday
  push:
    branches: [V1.00D]
    paths:
      - ".github/SECRETS_REQUIRED.md"
      - ".github/workflows/validate-secrets.yml"

permissions:
  contents: read
  issues: write

jobs:
  validate-vps-secrets:
    name: Validate VPS Deployment Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate VPS_SSH_KEY
        id: check_ssh_key
        run: |
          echo "🔐 Checking VPS_SSH_KEY..."
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "✅ VPS_SSH_KEY is configured"
            echo "ssh_key_status=✅ Configured" >> $GITHUB_OUTPUT
            # Validate SSH key format
            if echo "${{ secrets.VPS_SSH_KEY }}" | grep -q "BEGIN.*PRIVATE KEY"; then
              echo "✅ VPS_SSH_KEY appears to be valid SSH key format"
              echo "ssh_key_valid=true" >> $GITHUB_OUTPUT
            else
              echo "❌ VPS_SSH_KEY does not appear to be valid SSH key format"
              echo "ssh_key_valid=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ VPS_SSH_KEY is NOT configured"
            echo "ssh_key_status=❌ Missing" >> $GITHUB_OUTPUT
            echo "ssh_key_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate VPS_HOST
        id: check_host
        run: |
          echo "🔐 Checking VPS_HOST..."
          if [ -n "${{ secrets.VPS_HOST }}" ]; then
            echo "✅ VPS_HOST is configured: ${{ secrets.VPS_HOST }}"
            echo "host_status=✅ Configured (${{ secrets.VPS_HOST }})" >> $GITHUB_OUTPUT
          else
            echo "⚠️ VPS_HOST is not configured, using default: 72.60.176.200"
            echo "host_status=⚠️ Using default (72.60.176.200)" >> $GITHUB_OUTPUT
          fi

      - name: Validate VPS_USER
        id: check_user
        run: |
          echo "🔐 Checking VPS_USER..."
          if [ -n "${{ secrets.VPS_USER }}" ]; then
            echo "✅ VPS_USER is configured: ${{ secrets.VPS_USER }}"
            echo "user_status=✅ Configured (${{ secrets.VPS_USER }})" >> $GITHUB_OUTPUT
          else
            echo "⚠️ VPS_USER is not configured, using default: root"
            echo "user_status=⚠️ Using default (root)" >> $GITHUB_OUTPUT
          fi

      - name: Check Legacy Secret Names
        id: check_legacy
        run: |
          echo "🔍 Checking for legacy secret names..."
          LEGACY_FOUND=false
          
          if [ -n "${{ secrets.HOSTINGER_SSH_KEY }}" ]; then
            echo "⚠️ HOSTINGER_SSH_KEY found (legacy name)"
            echo "legacy_ssh_key=⚠️ Legacy name in use" >> $GITHUB_OUTPUT
            LEGACY_FOUND=true
          else
            echo "legacy_ssh_key=Not used" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.HOSTINGER_HOST }}" ]; then
            echo "⚠️ HOSTINGER_HOST found (legacy name)"
            echo "legacy_host=⚠️ Legacy name in use" >> $GITHUB_OUTPUT
            LEGACY_FOUND=true
          else
            echo "legacy_host=Not used" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.HOSTINGER_USERNAME }}" ]; then
            echo "⚠️ HOSTINGER_USERNAME found (legacy name)"
            echo "legacy_username=⚠️ Legacy name in use" >> $GITHUB_OUTPUT
            LEGACY_FOUND=true
          else
            echo "legacy_username=Not used" >> $GITHUB_OUTPUT
          fi
          
          if [ "$LEGACY_FOUND" = "true" ]; then
            echo "has_legacy=true" >> $GITHUB_OUTPUT
            echo "⚠️ Legacy secret names detected - consider migration to VPS_* naming"
          else
            echo "has_legacy=false" >> $GITHUB_OUTPUT
            echo "✅ No legacy secret names in use"
          fi

      - name: Test SSH Connection
        id: test_connection
        if: steps.check_ssh_key.outputs.ssh_key_valid == 'true'
        env:
          VPS_HOST: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || '72.60.176.200' }}
          VPS_USER: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || 'root' }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          echo "🔌 Testing SSH connection to VPS..."
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          
          # Test connection with timeout
          if timeout 30 ssh -i ~/.ssh/vps_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            $VPS_USER@$VPS_HOST "echo 'SSH connection successful'" 2>&1; then
            echo "✅ SSH connection test PASSED"
            echo "connection_status=✅ Connected successfully" >> $GITHUB_OUTPUT
          else
            echo "❌ SSH connection test FAILED"
            echo "connection_status=❌ Connection failed" >> $GITHUB_OUTPUT
          fi
          
          # Cleanup
          rm -f ~/.ssh/vps_key

      - name: Generate Validation Report
        if: always()
        run: |
          echo "## 🔐 Secrets Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "**Generated**: $(date)" >> validation-report.md
          echo "**Workflow Run**: ${{ github.run_id }}" >> validation-report.md
          echo "" >> validation-report.md
          
          echo "### Primary Secrets (VPS_*)" >> validation-report.md
          echo "| Secret | Status | Notes |" >> validation-report.md
          echo "|--------|--------|-------|" >> validation-report.md
          echo "| VPS_SSH_KEY | ${{ steps.check_ssh_key.outputs.ssh_key_status }} | Valid: ${{ steps.check_ssh_key.outputs.ssh_key_valid }} |" >> validation-report.md
          echo "| VPS_HOST | ${{ steps.check_host.outputs.host_status }} | - |" >> validation-report.md
          echo "| VPS_USER | ${{ steps.check_user.outputs.user_status }} | - |" >> validation-report.md
          echo "" >> validation-report.md
          
          echo "### Legacy Secrets (HOSTINGER_*)" >> validation-report.md
          echo "| Secret | Status | Migration |" >> validation-report.md
          echo "|--------|--------|-----------|" >> validation-report.md
          echo "| HOSTINGER_SSH_KEY | ${{ steps.check_legacy.outputs.legacy_ssh_key }} | Migrate to VPS_SSH_KEY |" >> validation-report.md
          echo "| HOSTINGER_HOST | ${{ steps.check_legacy.outputs.legacy_host }} | Migrate to VPS_HOST |" >> validation-report.md
          echo "| HOSTINGER_USERNAME | ${{ steps.check_legacy.outputs.legacy_username }} | Migrate to VPS_USER |" >> validation-report.md
          echo "" >> validation-report.md
          
          if [ "${{ steps.check_legacy.outputs.has_legacy }}" = "true" ]; then
            echo "### ⚠️ Migration Recommended" >> validation-report.md
            echo "" >> validation-report.md
            echo "Legacy HOSTINGER_* secrets are deprecated. Please migrate to VPS_* naming:" >> validation-report.md
            echo "" >> validation-report.md
            echo "1. Copy values from HOSTINGER_* to VPS_* secrets" >> validation-report.md
            echo "2. Test deployment with VPS_* secrets" >> validation-report.md
            echo "3. Remove HOSTINGER_* secrets after verification" >> validation-report.md
            echo "" >> validation-report.md
          fi
          
          echo "### Connection Test" >> validation-report.md
          echo "| Test | Result |" >> validation-report.md
          echo "|------|--------|" >> validation-report.md
          echo "| SSH Connection | ${{ steps.test_connection.outputs.connection_status || 'Not tested' }} |" >> validation-report.md
          echo "" >> validation-report.md
          
          echo "### Recommendations" >> validation-report.md
          echo "" >> validation-report.md
          
          if [ "${{ steps.check_ssh_key.outputs.ssh_key_valid }}" != "true" ]; then
            echo "- ❌ **Critical**: Configure VPS_SSH_KEY secret" >> validation-report.md
          fi
          
          if [ "${{ steps.test_connection.outputs.connection_status }}" = "❌ Connection failed" ]; then
            echo "- ⚠️ **Warning**: SSH connection failed - verify key and network access" >> validation-report.md
          fi
          
          if [ "${{ steps.check_legacy.outputs.has_legacy }}" = "true" ]; then
            echo "- ℹ️ **Info**: Migrate legacy HOSTINGER_* secrets to VPS_* naming" >> validation-report.md
          fi
          
          echo "" >> validation-report.md
          echo "---" >> validation-report.md
          echo "" >> validation-report.md
          echo "📚 **Documentation**: See `.github/SECRETS_REQUIRED.md` for setup instructions" >> validation-report.md
          
          cat validation-report.md

      - name: Upload Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-validation-report
          path: validation-report.md
          retention-days: 30

      - name: Comment on Issues (if validation fails)
        if: failure() && github.event_name != 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');
            
            const body = `## ⚠️ Secrets Validation Failed\n\n${report}\n\nPlease configure required secrets in repository settings.`;
            
            // Find or create an issue for secrets validation
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'configuration,secrets'
            });
            
            if (issues.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
            }

      - name: Summary
        if: always()
        run: |
          echo "## Secrets Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_ssh_key.outputs.ssh_key_valid }}" = "true" ]; then
            echo "✅ **VPS_SSH_KEY**: Configured and valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **VPS_SSH_KEY**: Not configured or invalid" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.test_connection.outputs.connection_status }}" = "✅ Connected successfully" ]; then
            echo "✅ **SSH Connection**: Successful" >> $GITHUB_STEP_SUMMARY
          elif [ -n "${{ steps.test_connection.outputs.connection_status }}" ]; then
            echo "❌ **SSH Connection**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SSH Connection**: Not tested (missing VPS_SSH_KEY)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Full report available in artifacts" >> $GITHUB_STEP_SUMMARY
