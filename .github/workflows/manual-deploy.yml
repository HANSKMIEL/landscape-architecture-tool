name: Manual Deploy to VPS

# Only trigger manually through the GitHub Actions interface
on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
        required: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true
        required: true
      backup_data:
        description: 'Backup user data before deployment'
        type: boolean
        default: true
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Only run frontend steps if deploy_frontend is true
      - name: Set up Node.js
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: |
          cd frontend
          npm run build
      
      # Only run backend steps if deploy_backend is true
      - name: Set up Python
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install backend dependencies
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: |
          pytest tests/
      
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
      
      # Backup user data if requested
      - name: Backup user data
        if: ${{ github.event.inputs.backup_data == 'true' }}
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_BACKEND_PATH: ${{ secrets.VPS_BACKEND_PATH }}
          DB_PATH: ${{ secrets.DB_PATH || 'data/app.db' }}
        run: |
          # Add VPS host key to known hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
          
          # Create timestamp for backup
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          # Create backup directory on VPS
          ssh $VPS_USER@$VPS_HOST "mkdir -p $VPS_BACKEND_PATH/backups"
          
          # Backup database
          echo "Creating database backup..."
          ssh $VPS_USER@$VPS_HOST "cp $VPS_BACKEND_PATH/$DB_PATH $VPS_BACKEND_PATH/backups/app_backup_$TIMESTAMP.db"
          
          # Backup user uploads if they exist
          echo "Backing up user uploads..."
          ssh $VPS_USER@$VPS_HOST "if [ -d $VPS_BACKEND_PATH/uploads ]; then tar -czf $VPS_BACKEND_PATH/backups/uploads_backup_$TIMESTAMP.tar.gz -C $VPS_BACKEND_PATH uploads; fi"
          
          echo "Backup completed successfully!"
      
      # Deploy frontend if requested
      - name: Deploy frontend
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          FRONTEND_DIST_PATH: frontend/dist
          VPS_FRONTEND_PATH: ${{ secrets.VPS_FRONTEND_PATH }}
        run: |
          echo "Deploying frontend..."
          ssh $VPS_USER@$VPS_HOST "mkdir -p $VPS_FRONTEND_PATH"
          rsync -avz --delete $FRONTEND_DIST_PATH/ $VPS_USER@$VPS_HOST:$VPS_FRONTEND_PATH/
          echo "Frontend deployed successfully!"
      
      # Deploy backend if requested
      - name: Deploy backend
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_BACKEND_PATH: ${{ secrets.VPS_BACKEND_PATH }}
        run: |
          echo "Deploying backend..."
          ssh $VPS_USER@$VPS_HOST "mkdir -p $VPS_BACKEND_PATH"
          
          # Use rsync with exclude patterns to preserve user data and configuration
          rsync -avz --delete \
            --exclude="*.pyc" \
            --exclude="__pycache__" \
            --exclude=".env" \
            --exclude="data/*.db" \
            --exclude="data/backups" \
            --exclude="uploads/*" \
            --exclude="logs/*" \
            --exclude="backups/*" \
            src/ $VPS_USER@$VPS_HOST:$VPS_BACKEND_PATH/
          
          echo "Backend deployed successfully!"
      
      # Restart services
      - name: Restart services
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_BACKEND_PATH: ${{ secrets.VPS_BACKEND_PATH }}
          BACKEND_SERVICE: ${{ secrets.BACKEND_SERVICE }}
        run: |
          echo "Restarting services..."
          ssh $VPS_USER@$VPS_HOST "systemctl restart nginx"
          
          # Check if backend service exists, if so use systemctl, else restart gunicorn manually
          ssh $VPS_USER@$VPS_HOST "if systemctl list-unit-files | grep -q \"$BACKEND_SERVICE\"; then systemctl restart \"$BACKEND_SERVICE\"; else cd \"$VPS_BACKEND_PATH\" && source venv/bin/activate && (pkill -f \"gunicorn.*main:app\" || true) && gunicorn -b 127.0.0.1:5000 main:app --daemon; fi"
      
      # Test deployment
      - name: Test deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          echo "Testing deployment..."
          ssh $VPS_USER@$VPS_HOST "curl -s http://localhost:5000/api/health"
      
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully!"
          echo "Application is now available at http://${{ secrets.VPS_HOST }}"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
