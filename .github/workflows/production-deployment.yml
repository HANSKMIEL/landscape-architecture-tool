name: Production Deployment

# Note: After branch migration, V1.00D will be renamed to main
# This workflow should trigger on the main development branch
on:
  push:
    branches: [main, V1.00D, production]
  pull_request:
    branches: [main, V1.00D]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - hotfix
      skip_tests:
        description: 'Skip test suite (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  # Job 1: Comprehensive Testing
  test:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_landscape
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/test_landscape
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          FLASK_ENV: testing
        run: |
          PYTHONPATH=. FLASK_ENV=testing python -m pytest tests/ -v --cov=src --cov-report=xml
          
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:vitest:run --coverage
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml,./frontend/coverage/lcov.info
          
      - name: Run security scan
        run: |
          pip install bandit safety
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job 2: Build Production Images
  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() && (needs.test.result == 'success' || inputs.skip_tests) }}
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Job 3: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: ${{ github.ref == 'refs/heads/main' || inputs.deployment_type == 'staging' }}
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure deployment
        run: |
          echo "DEPLOYMENT_TARGET=staging" >> $GITHUB_ENV
          echo "APP_URL=https://staging.landscape-tool.com" >> $GITHUB_ENV
          
      - name: Deploy to staging
        run: |
          # Deploy using our deployment script
          export DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}"
          export REDIS_URL="${{ secrets.STAGING_REDIS_URL }}"
          export SECRET_KEY="${{ secrets.STAGING_SECRET_KEY }}"
          ./scripts/github-actions-deploy.sh deploy
          
      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Run basic health checks
          curl -f ${{ env.APP_URL }}/health || exit 1
          curl -f ${{ env.APP_URL }}/api/dashboard/stats || exit 1
          
      - name: Notify staging deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="Staging deployment $STATUS for commit ${{ github.sha }}"
          echo "Deployment status: $MESSAGE"

  # Job 4: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: ${{ (github.ref == 'refs/heads/production' || inputs.deployment_type == 'production') && needs.deploy-staging.result == 'success' }}
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure production deployment
        run: |
          echo "DEPLOYMENT_TARGET=production" >> $GITHUB_ENV
          echo "APP_URL=https://landscape-tool.com" >> $GITHUB_ENV
          
      - name: Create backup
        run: |
          # Create database backup before deployment
          export DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}"
          ./scripts/github-actions-deploy.sh backup
          
      - name: Deploy to production
        run: |
          export DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}"
          export REDIS_URL="${{ secrets.PRODUCTION_REDIS_URL }}"
          export SECRET_KEY="${{ secrets.PRODUCTION_SECRET_KEY }}"
          export PRODUCTION_DOMAIN="landscape-tool.com"
          ./scripts/github-actions-deploy.sh deploy
          
      - name: Run production smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 90
          
          # Comprehensive health checks
          curl -f ${{ env.APP_URL }}/health || exit 1
          curl -f ${{ env.APP_URL }}/api/dashboard/stats || exit 1
          
          # Test authentication endpoint
          curl -f -X POST ${{ env.APP_URL }}/api/auth/status || exit 1
          
      - name: Notify production deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="🚀 Production deployment $STATUS for commit ${{ github.sha }}"
          echo "Production deployment status: $MESSAGE"
          
          # Send to monitoring/alerting systems
          if [[ "$STATUS" == "success" ]]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi

  # Job 5: Security Scanning and Compliance
  security:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Docker Scout scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ needs.build.outputs.image }}
          only-severities: critical,high
          exit-code: true

  # Job 6: Post-deployment monitoring
  monitor:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: ${{ always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success') }}
    
    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up post-deployment monitoring..."
          
          # Add monitoring checks here
          # - Performance metrics
          # - Error rate monitoring  
          # - Database connection health
          # - Cache performance
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ✅ Deployed | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ✅ Deployed | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | ✅ Migrated | Latest |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache | ✅ Ready | Redis 7 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Deployment completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY