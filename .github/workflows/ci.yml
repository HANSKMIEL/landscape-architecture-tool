name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: landscape_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_password
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install psycopg2-binary
        
    - name: Wait for services
      run: |
        # Wait for PostgreSQL and Redis to be ready
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres_password@localhost:5432/landscape_test
        PYTHONPATH: .
      run: |
        flask --app src.main db upgrade
        
    - name: Test backend with SQLite
      env:
        PYTHONPATH: .
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -v --tb=short --maxfail=5
        
    - name: Test backend with PostgreSQL
      env:
        DATABASE_URL: postgresql://postgres:postgres_password@localhost:5432/landscape_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-not-for-production
        PYTHONPATH: .
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -v --tb=short --maxfail=5

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
        
    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate || echo "Security vulnerabilities found"
        
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test frontend
      run: |
        cd frontend
        npm test
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety
        
    - name: Check Python formatting
      run: |
        black --check src/ tests/ --diff
        
    - name: Check import sorting
      run: |
        isort --check-only src/ tests/ --diff
        
    - name: Run Python linting
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run security linting
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Check Python security
      run: |
        safety check --json || echo "Security vulnerabilities found"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 30

  integration-tests:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: landscape_integration_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_password
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install psycopg2-binary requests
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres_password@localhost:5432/landscape_integration_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: integration-test-secret-key
        FLASK_ENV: testing
        PYTHONPATH: .
      run: |
        # Setup database
        flask --app src.main db upgrade
        
        # Start backend in background
        python src/main.py &
        BACKEND_PID=$!
        
        # Wait for backend to start
        timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
        
        # Test API endpoints
        curl -f http://localhost:5000/health
        curl -f http://localhost:5000/api/dashboard/stats
        
        # Test CRUD operations
        curl -X POST http://localhost:5000/api/suppliers \
          -H "Content-Type: application/json" \
          -d '{"name":"Test Supplier","contact_person":"John Doe","email":"john@test.com","phone":"123-456-7890","address":"123 Test St"}'
        
        curl -f http://localhost:5000/api/suppliers
        
        # Cleanup
        kill $BACKEND_PID

  docker-build:
    needs: [test-backend, test-frontend, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        # Validate docker compose configuration
        docker compose config > /dev/null
        
        # Build images
        docker compose build
        
        # Test with health checks
        docker compose up -d --wait --wait-timeout 300
        
        # Test endpoints
        timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
        timeout 30 bash -c 'until curl -f http://localhost:80; do sleep 2; done'
        
        # Cleanup
        docker compose down -v

  deploy:
    needs: [integration-tests, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ All checks passed! Ready for deployment"
        echo "ðŸ“Š Test Results: All tests passed"
        echo "ðŸ”§ Next steps: Manual review and approval for production deployment"