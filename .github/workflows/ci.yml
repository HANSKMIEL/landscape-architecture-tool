name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

    env:
      # Use a dedicated test URL for the entire job
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/app_test
      TEST_DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/app_test
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Ensure tooling is available even if not in requirements
          pip install --upgrade pytest pytest-cov ruff black isort SQLAlchemy psycopg[binary]

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 2
          done

      - name: Prepare database schema (alembic if available, else create_all)
        run: |
          python - <<'PY'
          import importlib, os
          import sqlalchemy as sa
          from sqlalchemy import text
          url = os.environ["TEST_DATABASE_URL"]
          engine = sa.create_engine(url, future=True)
          with engine.connect() as conn:
              try:
                  conn.execute(text("SET SESSION statement_timeout = '15s'"))
              except Exception:
                  pass
          # Try Alembic migrations
          try:
              alembic_cfg = None
              alembic = importlib.import_module('alembic')
              command = importlib.import_module('alembic.config')
              from alembic.config import Config
              from alembic import command as alembic_command
              cfg_path = 'migrations/alembic.ini'
              if os.path.exists(cfg_path):
                  cfg = Config(cfg_path)
                  alembic_command.upgrade(cfg, 'head')
                  print('Applied Alembic migrations')
              else:
                  raise RuntimeError('alembic.ini not found')
          except Exception as e:
              print(f'Alembic not available/applicable ({e}); falling back to create_all if Base is exposed')
              try:
                  # Adjust the import path to your project if needed
                  from src.models.user import db  # noqa: E402
                  db.metadata.create_all(bind=engine)
                  print('Created tables via db.metadata.create_all')
              except Exception:
                  print('No db available; assuming migrations manage schema')
          PY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint
        run: |
          ruff check .
          black --check .
          isort --check-only .
          cd frontend && npm run lint

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings --durations=10 --cov=. --cov-report=xml

      - name: Upload coverage artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml