name: Verify Issue Closed

on:
  issues:
    types: [closed]

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  verify-issue-closure:
    name: Verify Issue Resolution
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Analyze closed issue
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            
            console.log(`Analyzing closed issue #${issue.number}: ${issue.title}`);
            
            // Determine issue type and validation needs
            const labels = issue.labels.map(label => label.name);
            const title = issue.title.toLowerCase();
            const body = issue.body || '';
            
            let needsValidation = false;
            let validationType = 'general';
            
            // Check if this is a critical issue that needs validation
            if (labels.includes('bug') || labels.includes('critical') || 
                labels.includes('database') || labels.includes('api') ||
                title.includes('test') || title.includes('pipeline') ||
                title.includes('ci/cd') || title.includes('isolation')) {
              needsValidation = true;
              
              if (labels.includes('database') || title.includes('database') || title.includes('isolation')) {
                validationType = 'database';
              } else if (labels.includes('api') || title.includes('api')) {
                validationType = 'api';
              } else if (title.includes('test') || title.includes('pipeline') || title.includes('ci/cd')) {
                validationType = 'pipeline';
              }
            }
            
            core.setOutput('needs_validation', needsValidation);
            core.setOutput('validation_type', validationType);
            core.setOutput('issue_number', issue.number);
            core.setOutput('issue_title', issue.title);
            
            return {
              needsValidation,
              validationType,
              issueNumber: issue.number,
              issueTitle: issue.title,
              labels
            };

      - name: Setup Python for validation
        if: steps.analyze.outputs.needs_validation == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies for validation
        if: steps.analyze.outputs.needs_validation == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run database validation
        if: steps.analyze.outputs.needs_validation == 'true' && steps.analyze.outputs.validation_type == 'database'
        run: |
          echo "🗄️ Running database validation for issue #${{ steps.analyze.outputs.issue_number }}"
          
          # Test database isolation
          if [ -f "tests/test_database_isolation.py" ]; then
            echo "Testing database isolation..."
            PYTHONPATH=. python -m pytest tests/test_database_isolation.py -v --tb=short || echo "⚠️ Database tests failed"
          fi
          
          # Test transaction handling if the specific test exists
          if [ -f "tests/test_transaction_handling_fix.py" ]; then
            echo "Testing transaction handling..."
            PYTHONPATH=. python -m pytest tests/test_transaction_handling_fix.py -v --tb=short || echo "⚠️ Transaction tests failed"
          fi
          
          echo "✅ Database validation completed"

      - name: Run API validation
        if: steps.analyze.outputs.needs_validation == 'true' && steps.analyze.outputs.validation_type == 'api'
        run: |
          echo "🔌 Running API validation for issue #${{ steps.analyze.outputs.issue_number }}"
          
          # Test API routes
          if [ -d "tests/routes" ]; then
            echo "Testing API routes..."
            PYTHONPATH=. python -m pytest tests/routes/ -v --tb=short -k "not slow" || echo "⚠️ API tests failed"
          fi
          
          echo "✅ API validation completed"

      - name: Run pipeline validation
        if: steps.analyze.outputs.needs_validation == 'true' && steps.analyze.outputs.validation_type == 'pipeline'
        run: |
          echo "🔧 Running pipeline validation for issue #${{ steps.analyze.outputs.issue_number }}"
          
          # Run quick validation
          if [ -f "scripts/automated_validation.py" ]; then
            echo "Running automated validation..."
            python scripts/automated_validation.py --quick || echo "⚠️ Pipeline validation failed"
          fi
          
          # Test basic functionality
          echo "Testing basic application health..."
          PYTHONPATH=. python -c "
          try:
              from src.main import app
              print('✅ Application imports successfully')
          except Exception as e:
              print(f'⚠️ Application import issue: {e}')
          " || true
          
          echo "✅ Pipeline validation completed"

      - name: Run general validation
        if: steps.analyze.outputs.needs_validation == 'true' && steps.analyze.outputs.validation_type == 'general'
        run: |
          echo "🔍 Running general validation for issue #${{ steps.analyze.outputs.issue_number }}"
          
          # Run basic tests
          echo "Running core tests..."
          PYTHONPATH=. python -m pytest tests/test_basic.py -v --tb=short || echo "⚠️ Basic tests failed"
          
          echo "✅ General validation completed"

      - name: Add validation comment
        if: steps.analyze.outputs.needs_validation == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.analyze.outputs.issue_number }};
            const validationType = '${{ steps.analyze.outputs.validation_type }}';
            
            const comment = `## ✅ Issue Closure Validation
            
            This issue has been automatically validated after closure.
            
            **Validation Type:** ${validationType}
            **Issue:** #${issueNumber} - ${{ steps.analyze.outputs.issue_title }}
            **Status:** Validation completed
            
            ### Validation Steps Performed
            ${validationType === 'database' ? '- 🗄️ Database isolation tests' : ''}
            ${validationType === 'api' ? '- 🔌 API endpoint tests' : ''}
            ${validationType === 'pipeline' ? '- 🔧 Pipeline health checks' : ''}
            ${validationType === 'general' ? '- 🔍 Core functionality tests' : ''}
            
            ### Next Steps
            - Review test results in the workflow logs
            - Address any validation warnings if needed
            - Monitor for regression issues
            
            *Auto-generated by issue closure validation*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

      - name: No validation needed
        if: steps.analyze.outputs.needs_validation != 'true'
        run: |
          echo "ℹ️ Issue #${{ steps.analyze.outputs.issue_number }} doesn't require validation"
          echo "📋 Issue type: general/documentation"

      - name: Summary
        run: |
          echo "🎯 Issue closure verification completed"
          echo "📊 Issue #${{ steps.analyze.outputs.issue_number }}: ${{ steps.analyze.outputs.issue_title }}"
          echo "🔍 Validation needed: ${{ steps.analyze.outputs.needs_validation }}"
          echo "📝 Validation type: ${{ steps.analyze.outputs.validation_type }}"