name: Automated Pipeline Validation

permissions:
  contents: read
  pull-requests: write

# Note: After branch migration, V1.00D will be renamed to main
on:
  push:
    branches: [ main, V1.00D, develop, copilot/*, feature/* ]
  pull_request:
    branches: [ main, V1.00D, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        python-version: [3.12]
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        cd frontend && npm ci --legacy-peer-deps

    - name: Run Enhanced Automated Validation with Security Checks
      env:
        PYTHONPATH: .
        FLASK_ENV: testing
        CI: true
        # Enable enhanced security scanning
        SECURITY_ENHANCED: true
        QUALITY_GATES_STRICT: true
      run: |
        echo "🚀 Running enhanced automated validation with strict quality gates..."
        
        # Pre-validation security checks
        echo "🔒 Running security pre-checks..."
        bandit -r src/ -f txt || echo "⚠️ Security issues detected"
        safety check || echo "⚠️ Vulnerable dependencies detected"
        
        # Main validation with enhanced configuration
        python scripts/automated_validation.py
        
        echo "✅ Enhanced validation completed"

    - name: Upload Validation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-report-${{ github.run_number }}
        path: automated_validation_report_*.json
        retention-days: 30

    - name: Comment PR with Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the validation report
          const reportFiles = fs.readdirSync('.').filter(f => /^automated_validation_report_.*\.json$/.test(f));
          if (reportFiles.length === 0) {
            console.log('No validation report found');
            return;
          }
          
          const reportFile = reportFiles[0];
          const reportData = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
          
          // Create summary comment
          const status = reportData.overall_status;
          const summary = reportData.summary;
          const statusIcon = status === 'healthy' ? '✅' : status === 'warning' ? '⚠️' : '❌';
          
          const comment = `## ${statusIcon} Automated Validation Results
          
          **Overall Status:** ${status.toUpperCase()}
          **Health Score:** ${summary.health_percentage}% (${summary.healthy_steps}/${summary.total_steps} checks passed)
          
          ### Validation Steps
          ${Object.entries(reportData.validation_steps).map(([step, data]) => {
            const icon = data.status === 'healthy' ? '✅' : data.status === 'warning' ? '⚠️' : '❌';
            return `- ${icon} **${step.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}**: ${data.status}`;
          }).join('\n')}
          
          ### Recommendations
          ${reportData.recommendations.slice(0, 3).map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
          
          <details>
          <summary>View Full Report</summary>
          
          \`\`\`json
          ${JSON.stringify(reportData, null, 2)}
          \`\`\`
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });