name: Post-Merge Automation

# Note: After branch migration, V1.00D will be renamed to main
on:
  push:
    branches: [main, V1.00D, master]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  issues: write
  pull-requests: read

jobs:
  post-merge-automation:
    name: Post-Merge Follow-up Actions
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Analyze changes for follow-up needs
        id: analyze
        run: |
          echo "üîç Analyzing changes for follow-up requirements..."
          
          # Get list of changed files
          git diff --name-only HEAD~1 HEAD > changed-files.txt
          
          # Initialize flags
          needs_api_review=false
          needs_n8n_review=false
          needs_space_docs_review=false
          needs_readme_update=false
          
          # Check for API changes
          if grep -E '\.(py)$' changed-files.txt | grep -E '(routes/|api/|schemas/|services/)' >/dev/null; then
            needs_api_review=true
            echo "üîå API changes detected"
          fi
          
          # Check for n8n workflow changes or integrations
          if grep -E '(n8n|webhook|automation|workflow)' changed-files.txt >/dev/null || \
             git diff HEAD~1 HEAD -- . | grep -i -E '(n8n|webhook|automation|workflow)' >/dev/null; then
            needs_n8n_review=true
            echo "üîÑ N8n/automation changes detected"
          fi
          
          # Check for Copilot Space or documentation changes
          if grep -E '(copilot-instructions|\.github/|docs/|documentation/)' changed-files.txt >/dev/null; then
            needs_space_docs_review=true
            echo "üìö Copilot Space/docs changes detected"
          fi
          
          # Check for README markers for auto-update
          if git diff HEAD~1 HEAD -- README.md | grep -E '<!-- AUTO-UPDATE|@auto-update' >/dev/null; then
            needs_readme_update=true
            echo "üìù README auto-update markers detected"
          fi
          
          # Set outputs
          echo "needs_api_review=$needs_api_review" >> $GITHUB_OUTPUT
          echo "needs_n8n_review=$needs_n8n_review" >> $GITHUB_OUTPUT
          echo "needs_space_docs_review=$needs_space_docs_review" >> $GITHUB_OUTPUT
          echo "needs_readme_update=$needs_readme_update" >> $GITHUB_OUTPUT
          
          echo "üìä Analysis complete"

      - name: Create API review follow-up issue
        if: steps.analyze.outputs.needs_api_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: changedFiles } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: '${{ github.event.before }}',
              head: '${{ github.sha }}'
            });
            
            const apiFiles = changedFiles.files
              .filter(file => file.filename.match(/\.(py)$/) && 
                             file.filename.match(/(routes\/|api\/|schemas\/|services\/)/))
              .map(file => `- \`${file.filename}\` (${file.status})`)
              .join('\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîå API Review Required - Changes Detected',
              body: `## API Changes Detected
              
              Recent changes have been made to API-related files that may require review and documentation updates.
              
              ### Changed Files
              ${apiFiles}
              
              ### Review Checklist
              - [ ] Verify API endpoints still work correctly
              - [ ] Update API documentation if needed
              - [ ] Check if OpenAPI/Swagger specs need updating
              - [ ] Verify authentication/authorization still works
              - [ ] Test API integration points
              - [ ] Update postman collections or API tests
              
              ### Related Commit
              ${context.payload.head_commit.url}
              
              **Auto-generated by post-merge automation**`,
              labels: ['api', 'review-required', 'automation']
            });

      - name: Create N8n review follow-up issue
        if: steps.analyze.outputs.needs_n8n_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîÑ N8n Workflow Review Required',
              body: `## N8n/Automation Changes Detected
              
              Recent changes have been detected that may affect N8n workflows or automation.
              
              ### Review Checklist
              - [ ] Check if existing N8n workflows need updates
              - [ ] Verify webhook endpoints still work
              - [ ] Test automation triggers
              - [ ] Update workflow documentation in \`n8n-workflows/README.md\`
              - [ ] Validate integration with external services
              - [ ] Check if new workflows are needed
              
              ### N8n Workflow Files
              - Review files in \`n8n-workflows/\` directory
              - Check webhook integrations in application code
              - Verify automation documentation
              
              ### Related Commit
              ${context.payload.head_commit.url}
              
              **Auto-generated by post-merge automation**`,
              labels: ['n8n', 'automation', 'review-required']
            });

      - name: Create Copilot Space docs review follow-up issue
        if: steps.analyze.outputs.needs_space_docs_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìö Copilot Space Documentation Review Required',
              body: `## Copilot Space/Documentation Changes Detected
              
              Recent changes have been made to Copilot Space configuration or documentation.
              
              ### Review Checklist
              - [ ] Verify \`.github/copilot-instructions.md\` is up to date
              - [ ] Check if new architecture patterns need documenting
              - [ ] Update development guidelines if needed
              - [ ] Verify Copilot Space examples are current
              - [ ] Test Copilot responses with new instructions
              - [ ] Update troubleshooting guides
              
              ### Documentation Files
              - \`.github/copilot-instructions.md\`
              - \`documentation/\` directory
              - Developer guidelines and workflows
              
              ### Related Commit
              ${context.payload.head_commit.url}
              
              **Auto-generated by post-merge automation**`,
              labels: ['documentation', 'copilot-space', 'review-required']
            });

      - name: Auto-update README with markers
        if: steps.analyze.outputs.needs_readme_update == 'true'
        run: |
          echo "üìù Processing README auto-update markers..."
          
          # This is a placeholder for README auto-update logic
          # In a real implementation, you would:
          # 1. Parse README.md for <!-- AUTO-UPDATE-SECTION:name --> markers
          # 2. Generate content based on the marker type
          # 3. Update the content between markers
          # 4. Commit the changes
          
          echo "‚ÑπÔ∏è README auto-update feature ready for implementation"
          echo "Add markers like <!-- AUTO-UPDATE-SECTION:dependencies --> to README.md"

      - name: Summary
        run: |
          echo "üéØ Post-merge automation completed"
          echo "üìä Analyzed changes for follow-up requirements"
          echo "üé´ Created follow-up issues as needed"
          echo "üìù Processed README auto-update markers"