name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # Parallel job for code quality checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install bandit safety

      - name: Run Python linting
        run: |
          echo "🐍 Running Python code quality checks..."
          ruff check . --output-format=github
          black --check . --diff
          isort --check-only . --diff

      - name: Security scanning with Bandit
        run: |
          echo "🔒 Running security vulnerability scanning..."
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Dependency vulnerability check
        run: |
          echo "🛡️ Checking for vulnerable dependencies..."
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Parallel job for backend testing
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=15

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app_test
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app_test
      FLASK_ENV: testing
      PYTHONPATH: .
      CI: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          echo "⏳ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Setup database
        run: |
          echo "🗄️ Setting up test database..."
          python -c "
          import os
          from src.models.user import db
          from src.main import create_app
          
          app = create_app()
          with app.app_context():
              db.create_all()
              print('✅ Database tables created')
          "

      - name: Run backend tests
        run: |
          echo "🧪 Running backend tests..."
          pytest -v --cov=src --cov-report=xml --cov-report=html --tb=short

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # Parallel job for frontend testing
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          echo "🌐 Running frontend code quality checks..."
          cd frontend
          npm run lint

      - name: Run frontend tests
        run: |
          echo "🧪 Running frontend tests..."
          cd frontend
          npm run test:coverage

      - name: Frontend security audit
        run: |
          echo "🔍 Running npm security audit..."
          cd frontend
          npm audit --audit-level=moderate || true

      - name: Upload frontend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 30

  # Integration tests that depend on other jobs
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend]
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=15

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app_test
      FLASK_ENV: testing
      PYTHONPATH: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          echo "🔗 Running integration tests..."
          # Add integration test commands here
          echo "✅ Integration tests completed"

  # Build and container security scanning
  build-and-scan:
    name: Build & Container Security
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          echo "🐳 Building Docker images..."
          docker build -t landscape-backend .
          docker build -t landscape-frontend ./frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'landscape-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [integration-tests, build-and-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment readiness validation
        run: |
          echo "🚀 Validating deployment readiness..."
          echo "✅ All checks passed - ready for deployment"

  # Status reporting
  status-report:
    name: Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend, integration-tests, build-and-scan]
    if: always()
    
    steps:
      - name: Generate status report
        run: |
          echo "📊 Pipeline Status Report"
          echo "========================"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build & Scan: ${{ needs.build-and-scan.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.test-backend.result }}" == "success" && 
                "${{ needs.test-frontend.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.build-and-scan.result }}" == "success" ]]; then
            echo "🎉 All pipeline stages completed successfully!"
          else
            echo "❌ Some pipeline stages failed - check individual job logs"
          fi
