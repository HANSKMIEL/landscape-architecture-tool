# Pre-commit configuration for landscape architecture tool
# Prevents problematic commits that could trigger CI/CD issues

repos:
  # Python code formatting and quality
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]
        
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        
  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        args: [
          --max-line-length=88,
          --extend-ignore=E203,W503,F401,F403,E402,C901,W291,
          --max-complexity=25
        ]

  # Security and safety checks
  - repo: https://github.com/pycqa/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: [-r, src/, -f, json, -o, bandit-report.json]
        pass_filenames: false

  # General file quality checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
        exclude: \.md$
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python-specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]

  # Environment and configuration validation
  - repo: local
    hooks:
      - id: validate-env-vars
        name: Validate environment variables
        entry: python
        language: system
        args: [-c, "
import os, sys;
required_vars = ['DATABASE_URL', 'REDIS_URL', 'SECRET_KEY'];
missing = [v for v in required_vars if not os.getenv(v) and not os.getenv('SKIP_ENV_CHECK')];
print(f'Missing vars: {missing}') if missing else print('✅ Env vars OK');
sys.exit(1) if missing else sys.exit(0)
        "]
        pass_filenames: false
        always_run: true

  # Copilot-specific validation
  - repo: local
    hooks:
      - id: copilot-file-cleanup
        name: Clean up Copilot temporary files
        entry: bash
        language: system
        args: [-c, "
find . -name '*.copilot.md' -delete;
find . -name '*_copilot_*' -type f -delete;
find . -name 'temp_*.py' -delete;
find . -name 'draft_*.py' -delete;
echo '✅ Copilot cleanup complete'
        "]
        pass_filenames: false
        always_run: true

  # Database migration validation
  - repo: local
    hooks:
      - id: validate-migrations
        name: Validate database migrations
        entry: python
        language: system
        args: [-c, "
import os, glob;
migrations = glob.glob('migrations/versions/*.py');
print(f'✅ Found {len(migrations)} migration files') if migrations else print('⚠️ No migrations found');
# Add migration syntax validation here if needed
        "]
        pass_filenames: false
        stages: [pre-commit]

  # Basic import validation
  - repo: local
    hooks:
      - id: validate-imports
        name: Validate Python imports
        entry: python
        language: system
        args: [-c, "
try:
    import src.main
    print('✅ Main application imports work')
except ImportError as e:
    print(f'❌ Import error: {e}')
    exit(1)
        "]
        pass_filenames: false
        files: \.(py)$